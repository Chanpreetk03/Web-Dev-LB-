JS BASICS 



CLASS 1
html is used to make skeleton(what?)
css is used for style(appearance)
JS is used for behaviour and functionality

take your hand for example: the bones is html the skin is css and moving your hand is js

What is Javascript?
its a light weight programming language 
it can also be called scripting language

client side scripting language.
to run js we need js engine(an enviornmen t with which we use to run js)

then it was added in c++ programme called node and hence it can also be used server side.
the the computer which sends you data is server.
the print statement is consol.log("")

console is a tool in web to log and print info

script can be added in head tag too
but the best practice is for script tag to added at the end of body
so user experience ko achha karne ke liye we put it at end.

everything in '' is called string.
collection of characters
semi colon is used to end the line
comment is a line which is not executed

best practice we make a different file for js stuff
and link html and js

Do we need active internet connection to use console in web browser
JAVA V/S JAVASCRIPT

Variable:
named memory location is called variable

we can use let and var to create var in js
JS is dynamically typed language and hence we dont we need to tell it the type of datatype

variable name : var a=10
a is the variable name

the difference between var and let is the scope of variables.
the scope of variable made using let is in the code block it was made in.
we can not redeclare the let variables.
the variable made using var is global

const a=5
fixed value
this one also jst works in its own scope

the rules of variable naming:
-not a reserved keyword
-they should be meaningful
-can not contain " " or hyphen"-"
-cant start with numbers
-use camelCasing

PRIMITIVE DATA TYPES:
-string (sequence of characters "lojkl")
-number(1,2,3 all types int float etc)
-bool(true or false)
-null(empty )
-undefined(something which has not been defined let a; clg(a); in c++ this gives garbage value in js it gives undefined)

DYNAMIC TYPING

in c++ you cant 
int a=5 
a="babbar"


in js you can
let a=5
a=babbar

REFERENCE TYPE DATA TYPES

OBJECTS(multiple variables linked in ways we can make them objects using a class)
ARRAYS(list of (similar kind of )items data-structures in js there can be different types of items)
FUNCTION

How to make objects:
let person{
    firstname:"chan",
    lastName:"kaur",
    age:20
};
here firstName is property and "chan" is object literal

the person is the name of object
ways to access the values in them.
person.age()
person['age']  why??

How to make arrays:
let names=['love' , 'af' ,'husk']

to access the values of array we use index
names[0]

names[3]="rahul"
to add
names[1]=1 will over-ride


OPERATORS
-Arithmetic(+ - * / % ** ++ -- )
-Assignment(= , += , -= ,*= ,/=)
-Comparison(<,>,<=,>= , == === !==)
-Bitwise(>> , << & | ~ ^)
-Logical( && || !)

pre/post inc/dec
++x
x++
--y
y--

in pre we first change the value then use it
in post we first use the value then change it

equality :
loose and strict
== just checks the value and not datatype
=== checks both

Ternary operator:
condition ? value1:value2;

1st will be executed if true

Logical operators on non-booleans
concept of false and true
(false || "love")

the answer will be "love"
falsy and truthy values
falsey values are: false, undefined,null," ".Nan(not a number)
truthty:anything that is not falsey

(false || 5 ||1)
first is a falsey value the other two are truthy and the answer is 5
or has a concept of short circuiting
if we have gotten a truthy value we just print it

doest the concept of falsey and truthy work in and 
and (false && 5 && 1) (true && 5 && 1)

if we do 2 &3
we get 2
2|3
we get 3


Operator precedence

let c=a+b*d/e

we use brackets so as to elimanate the need to remember the table


CONDITIONALS

if(){}
else if(){}
else{}

SWITCH

switch(expression){
    case:
    case:
    case:
    default:
}

In this break is very important
breaks the control execution flow


LOOPS
-for loop
-while
-do-while
-infinite
-for-in
-for-of

for:
for(initialization,condition,updation){
    clg(i)
}

for(let i=0 ; i<5 ; i++){
    clg(i);
}
ans 0 1 2 3 4
initialize
while(condition){
    updation;
}

in do-while:
initialize
do{
    code
    update
}while(condition)
this executes atleast once in any scenario



****************************


CLASS-2


What are objects?

We saw that many variables/functions were linked to to one another.

so object is an entity which has some properties and some behaviours.

How to create objects in JS.

const Rect={
    len:1,
    width:2
}
collection of keyValue pairs

{} - object literals.

let a={} empty object

function is a sub programme which performs  well defined task
if a function is created in an object its called method.

We are doing oops here object oriented programming

lets say we need more rectangles we cant copy that code again and again
it can lead to bulking of code, bugs

So how to create objects?
-factory function(jiske andar object bante hai aur milte hai)
here you put a request for creation of function (calling a function) and the response is the object(return)
function createObj(){
    return object
}
let obj=createObj()

-construction function

here we follow pascal notation:
first letter of every word is capita
camel : numberOfStu
pascal: NumOfStu

this keyword refers to your current object
constructor function does nothing but initialize your properties.
in JS the new keyword which gives you an empty object

Dynamic nature of objects
we can add and remove properties 

Constructor property 
object in js have a property called constructor which tells you how your object was created


What is the constructor of the constructor
Intern ally js has a constructor which is used to make these constructors

Functions are OBJECTS
objects are something which have properties and behaviours.

A function named rectangle also has properties and methods

TYPES IN JS
-primitive(number , string,bool,undefined,null)
let a=10;
let b=a;
a++  (a=11 b=10)
here a copy is created


-reference(functions,objects,arrays)
let a={value:10}
let b=a;
a.value++; (a.value=11 b.value=11)  why same here?

a is an obj with value 10 and b is equated to it.
Now when we equate t simply, the address is passed.
for eg the address of a is 1000 now the address of b is also 1000.
hence they are same block
they point to same block


PRIMITIVES ARE COPIED BY THERE VALUE AND REFERENCES ARE COPIED BY THIER REFERENCE

pass by value: when you pass a primitive to a function there copy is created in that function


OBJECT CLONING
-iteraation
-assign
let dest=object.assign({} , src)
-spread
let dest ={...src};


GARBAGE collection
finds variables and constants which are not in use automatically.
WE have no control this



******



CLASS-3

IN-BUILT OBJECTS 

-Math:
In built object which has properties and Functions

Math.random() generates random number between 0-1
Math.PI() gives value of pi (3.14)
Math.round(x) round offs x 

Math.min() gives min between numbers
Math.abs() gives absolute number mod of the number


-string
in js we have 2 types of string primitive and object 

let name=new String("abc");
If we apply a dot  with a normal string it becomes a object.




