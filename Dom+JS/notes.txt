DOM+ MODERN JS



CLASS-1

->Window: window is an object(global) created by browser. It represents the browser window.
DOM, BOM, Js core functions lie under this.
its a top level entity. 
window.console.log() same as :console.log

->DOM: Document Object Model: we convert all the html code to JS object which we call Document. 

->BOM: It allows js to talk to browser about matters other than content of page. alert box are also a way to communicate to browser.
Browser Object Model, history,location,screen

DOM:

DOCUMENT OBJECT MODEL
its a tree like structure, the first is root which has children which further have children
this is a basic structure of html file:
<html>
<head></head>
<body></body>
</html>

everything in <> becomes tags. these are made tags by tokenizer
these tokens are then converted to nodes by process and now your dom is ready.

character-->tags-->token--(tokenizer)-->nodes

head is child of html node 
head is parent of title node.
to change an element we have to fetch it and store it. to do that one of the methods is
method : getElementbyId: returns the element with this id
getElementsbyClassName: for getting class(returns array like object for all elements) we get an html collection
.getElementsbyTagName:like class one but for tags

Things to keep in mind for class and tag:
1)they work on Document method
2)they return multiple items
3)they return html collection not array

$0:its a trick for inspect if you hover on an element and write this in console you get there name.

We also have another selector: query selector.
querySelector("#header") : will get an object with this id
querySelector(".header"): will bring a single object of this class
querySelector("header"):the first element with this tag.

it always returns a single output, if there are multiple elements it returns the first one.

if we want multiple objects in return we use .querySelectorAll


If we want to update existing content 
.innerHTML: get/set (gets an element/gets all the descendants under it)(it can also push)
.outerHTML:
.textContent:(get/set your text)
.innerText:(get/set your text)

the difference between innerHTML and text content if you write the contents in innerHTML the tags get rendered and in textContent they are treated as text.
and if the display is hidden, that part wont be visible in innerHTML but will be in textContent

->ADDING NEW ELEMENT/CONTENT 
.createElement();
content.appendChild(newChild);

this gets appended at the end.

-HOW TO CREATE TEXT NODE 
let newPara=document.createElement("p");

let textPara=document.createTextNode("new boyi");
newPara=appendChild(textPara);
content.appendChild(newPara);

now we have added the content

another and better way is:
let myPara=document.createElement('p');
myPara.textContent="i am new para";
content.appendChild(myPara);

what if we want to position element added?

.innerAdjacentHTML()
it has to be called 2 arguments.
1st:where?
2nd:what?

beforebegin(previous sibling)
afterbegin(as 1st child)
beforeend(last child)
afterend(next sibling)

-Remove
condition:we need to know the parent element
and which element to remove.

NOW HOW TO MAKE CHANGES IN CSS 
.style()
.cssText
.setAttribute
.className 
.classList(add , remove , toggle , contain)

You can only modify one propeerty using: .style.color etc 

to change multiple things:
.style.cssText="color:green; backgroundcolor:yellow;'
etc




*********



BROWSER EVENTS
if we write the code as we have written before it'll be executed as soon as the page gets loaded.
But sometimes we want some events to execute after a certain event.
Events are:clicking,scrolling , resizing, everything being loaded on browser

-WHAT ARE EVENTS?

browser is announcing that something has happened is called browser events.
Generally, the world of events is invisible. so to see them we have a method called monitor events.

As soon as an event occurs, it gives us a msg about it.
monitorEvent(document)

to turn-off this unmonitorEvents
in forms, we have an action button, which tells us what to do when clicked or filled.

-WHAT IS EVENT LISTENER?

in c++ and java you have classes which is a blueprint of objects.

interface is like blueprint here.

event target :is a type of interface, implemented by objects that can receive events and may have listeners for them.

The action after the event is defined by listener.

event target can: addEventListener, removeEventListener, dispatchEvent

This is a top level entity interface, document comes under it. Window is global obj and this is interface
A node inherits from event target, jo bhi methods and properties event target ke pass hongi wo node bhi inherit kar lega aur node se element inherit kar lega. the element will als o inherit the properties of Node which are not there in event target.

eventTarget--->Node--->element

-->.addEventListener():
you are applying a listener on an event. it listens/responds to event 
or hook into event.

<eventTarget>.addEventListener(<event to listen for> , <function if the event happens>)

so you need 3 things:
1)event target : on which component do you want to apply listen to.(document , para, article etc)
2)event type: click,double click, scroll 
3)function: what to do when event happens.

== allows type coercion (js will try to convert the items being compared to same type).
=== doesn't allow this.

function passed in addEventListener, so to use removeEventListener we have to pass the exact same function

We can only remove event listener when we make another 
So removeEventListener will work only when:
1)same eventTarget
2)same event
3)same function

PHASES OF AN EVENT 
-capturing PHASES(here you look for the element on which you want to apply it)
-at target PHASES(as soon as you find it)
-bubbling PHASES(then they go back)

By default addEventListener is executed in bubbling phase.
we can apply it in capturing phase using true as the 3rd argument.
It can be changed by using the third argument in the above

Can it also be applied at target phase?

THE EVENT OBJECT 
browser sends the event 
it has three phases.

When an event occurs, the addEventListener gets an event object which has a lot of info.

AVOID TOO MANY EVENTS

HOW TO FILTER OUT THE TAGS ON WHICH WE DONT WANT TO  HAVE THE EVENT LISTENER





*****



CLASS - 3

 

PERFORMANCE

how to measure the speed of code?
how to write efficient and performing code?
Event loop

standard way to measure how long you code takes to run 

performance.now() : this is very accurate function. 

In the code we start add a para which updates our dom

reflow:basically whenever we add a element we do some mathematical calcs this process is called reflow(process of calculating the dimensions and position of element. this is a computational task)
repaint: to show the new element pixel by pixel is called re paint
process of drawing pixels to the screen(faster than reflow)
So the major way to optimize our code is to lessen the number of reflows and repaints

DOCUMENT FRAGMENT: light weight document object but when you add the elements to it the there are 0 reflows and repaints as the elements are not being added to dom. the reflow and repaint will happen whn we add this fragment to our DOM.

THE CALL STACK

single threading: one command at a time
js is a single threaded language.

JS has run to completion nature of code.
JS doesn't execute at the same time.

EVENT LOOP:

call stack 
browser
event queue

for example:

clg("yo");

document.addEventListener("click" , function(){});

clg("yo again");


what happens is first the line 244 goes to call stack gets executed and comes out of stack
then line 246 goes to call stack and then it informs browset about the functions and leaves
then line 248 is executed

and then if we click anywhere the event goes to event queue and is then executed when the call stack is empty.
meaning if there is a syncronous execution going on the event wont be executed instantly

philip robert: what the heck is event loop?

also check out loupe.

async code uses:
1)js event loop
2)any async code is handled by browser
3)whenever call stack is empty the async moves from queue to stack

setTimeout()
setTimeout(function(){
    clg("hi");
},4000ms)

this is async function and 4000 mili seconds is the minimum time for this function to execute

2 parameters: function to be executed and the minimum time after it should be executed.
a call to set setTimeout function gives a call back function to browser.

what happens when:

setTimeout(function(){

},0);


this will not run immediately
whenever you are try to defer something until the stack is clear(taalne ki koshish) we can use this 



*********


CLASS - 4


PROMISES ASYNC AWAIT FETCH API 

synchronous: occurs at the same time line by line
asynchronous code: it will be performed but dont know when
this uses event loop
